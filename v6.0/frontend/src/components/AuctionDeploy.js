import React, { useState } from 'react';
import contractAbi from "../contract/BasicDutchAuction.json";
import { ethers } from 'ethers';

const contractBytecode = ""

const abi = contractAbi.abi;
const provider = new ethers.providers.Web3Provider(window.ethereum);
const signer = provider.getSigner();
const contractFactory = new ethers.ContractFactory(abi, contractBytecode, signer);
const ContractDeployer = () => {
    const [reservePrice, setReservePrice] = useState('');
    const [auctionDuration, setAuctionDuration] = useState('');
    const [priceDecrement, setPriceDecrement] = useState('');
    const [contractAddress, setContractAddress] = useState('');

    const deployContract = async () => {
        await window.ethereum.enable();
        const contract = await contractFactory.deploy(reservePrice, auctionDuration, priceDecrement);
        await contract.deployTransaction.wait();
        setContractAddress(contract.address);
    };
    
    return (
        <div>
            <label>
                Reserve Price:
                <input type="text" value={reservePrice} onChange={(e) => setReservePrice(e.target.value)} />
            </label>
            <label>
                Auction Duration:
                <input type="text" value={auctionDuration} onChange={(e) => setAuctionDuration(e.target.value)} />
            </label>
            <label>
                Price Decrement:
                <input type="text" value={priceDecrement} onChange={(e) => setPriceDecrement(e.target.value)} />
            </label>
            <button onClick={deployContract}>Deploy Contract</button>
            {contractAddress && <p>Deployed contract at address: {contractAddress}</p>}
        </div>
    );
    }
    
    export default ContractDeployer;
    