/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface AuctionContractInterface extends utils.Interface {
  functions: {
    "auctionCreationBlock()": FunctionFragment;
    "auctionDurationBlocks()": FunctionFragment;
    "auctionOwner()": FunctionFragment;
    "decrementPerBlock()": FunctionFragment;
    "getCurrentBid()": FunctionFragment;
    "initialOfferPrice()": FunctionFragment;
    "minimumAcceptablePrice()": FunctionFragment;
    "placeBid()": FunctionFragment;
    "successfulBidder()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "auctionCreationBlock"
      | "auctionDurationBlocks"
      | "auctionOwner"
      | "decrementPerBlock"
      | "getCurrentBid"
      | "initialOfferPrice"
      | "minimumAcceptablePrice"
      | "placeBid"
      | "successfulBidder"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "auctionCreationBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auctionDurationBlocks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auctionOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decrementPerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentBid",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialOfferPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumAcceptablePrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "placeBid", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "successfulBidder",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "auctionCreationBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionDurationBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decrementPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialOfferPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumAcceptablePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "placeBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "successfulBidder",
    data: BytesLike
  ): Result;

  events: {};
}

export interface AuctionContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AuctionContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    auctionCreationBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    auctionDurationBlocks(overrides?: CallOverrides): Promise<[BigNumber]>;

    auctionOwner(overrides?: CallOverrides): Promise<[string]>;

    decrementPerBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentBid(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialOfferPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    minimumAcceptablePrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    placeBid(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    successfulBidder(overrides?: CallOverrides): Promise<[string]>;
  };

  auctionCreationBlock(overrides?: CallOverrides): Promise<BigNumber>;

  auctionDurationBlocks(overrides?: CallOverrides): Promise<BigNumber>;

  auctionOwner(overrides?: CallOverrides): Promise<string>;

  decrementPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentBid(overrides?: CallOverrides): Promise<BigNumber>;

  initialOfferPrice(overrides?: CallOverrides): Promise<BigNumber>;

  minimumAcceptablePrice(overrides?: CallOverrides): Promise<BigNumber>;

  placeBid(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  successfulBidder(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    auctionCreationBlock(overrides?: CallOverrides): Promise<BigNumber>;

    auctionDurationBlocks(overrides?: CallOverrides): Promise<BigNumber>;

    auctionOwner(overrides?: CallOverrides): Promise<string>;

    decrementPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentBid(overrides?: CallOverrides): Promise<BigNumber>;

    initialOfferPrice(overrides?: CallOverrides): Promise<BigNumber>;

    minimumAcceptablePrice(overrides?: CallOverrides): Promise<BigNumber>;

    placeBid(overrides?: CallOverrides): Promise<string>;

    successfulBidder(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    auctionCreationBlock(overrides?: CallOverrides): Promise<BigNumber>;

    auctionDurationBlocks(overrides?: CallOverrides): Promise<BigNumber>;

    auctionOwner(overrides?: CallOverrides): Promise<BigNumber>;

    decrementPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentBid(overrides?: CallOverrides): Promise<BigNumber>;

    initialOfferPrice(overrides?: CallOverrides): Promise<BigNumber>;

    minimumAcceptablePrice(overrides?: CallOverrides): Promise<BigNumber>;

    placeBid(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    successfulBidder(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    auctionCreationBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    auctionDurationBlocks(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    auctionOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decrementPerBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentBid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialOfferPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minimumAcceptablePrice(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    placeBid(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    successfulBidder(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
