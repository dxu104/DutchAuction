/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface BasicDutchAuctionInterface extends utils.Interface {
  functions: {
    "auctionCreator()": FunctionFragment;
    "auctionDurationInBlocks()": FunctionFragment;
    "auctionEndBlockNumber()": FunctionFragment;
    "auctionEnded()": FunctionFragment;
    "bidsByAddress(address)": FunctionFragment;
    "getBalance(address)": FunctionFragment;
    "getCurrentAuctionPrice()": FunctionFragment;
    "hasReceivedValidBid()": FunctionFragment;
    "initialBidValue()": FunctionFragment;
    "initialParticipant()": FunctionFragment;
    "minimumAcceptablePrice()": FunctionFragment;
    "placeBid()": FunctionFragment;
    "priceDecrementPerBlock()": FunctionFragment;
    "retrieveRefund()": FunctionFragment;
    "startPrice()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "auctionCreator"
      | "auctionDurationInBlocks"
      | "auctionEndBlockNumber"
      | "auctionEnded"
      | "bidsByAddress"
      | "getBalance"
      | "getCurrentAuctionPrice"
      | "hasReceivedValidBid"
      | "initialBidValue"
      | "initialParticipant"
      | "minimumAcceptablePrice"
      | "placeBid"
      | "priceDecrementPerBlock"
      | "retrieveRefund"
      | "startPrice"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "auctionCreator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auctionDurationInBlocks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auctionEndBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auctionEnded",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bidsByAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentAuctionPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasReceivedValidBid",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialBidValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialParticipant",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumAcceptablePrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "placeBid", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceDecrementPerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "retrieveRefund",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startPrice",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "auctionCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionDurationInBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionEndBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionEnded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bidsByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentAuctionPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasReceivedValidBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialBidValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialParticipant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumAcceptablePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "placeBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceDecrementPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retrieveRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startPrice", data: BytesLike): Result;

  events: {
    "AuctionCompleted(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuctionCompleted"): EventFragment;
}

export interface AuctionCompletedEventObject {
  winner: string;
  amount: BigNumber;
}
export type AuctionCompletedEvent = TypedEvent<
  [string, BigNumber],
  AuctionCompletedEventObject
>;

export type AuctionCompletedEventFilter =
  TypedEventFilter<AuctionCompletedEvent>;

export interface BasicDutchAuction extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BasicDutchAuctionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    auctionCreator(overrides?: CallOverrides): Promise<[string]>;

    auctionDurationInBlocks(overrides?: CallOverrides): Promise<[BigNumber]>;

    auctionEndBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    auctionEnded(overrides?: CallOverrides): Promise<[boolean]>;

    bidsByAddress(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBalance(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCurrentAuctionPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    hasReceivedValidBid(overrides?: CallOverrides): Promise<[boolean]>;

    initialBidValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialParticipant(overrides?: CallOverrides): Promise<[string]>;

    minimumAcceptablePrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    placeBid(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    priceDecrementPerBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    retrieveRefund(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startPrice(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  auctionCreator(overrides?: CallOverrides): Promise<string>;

  auctionDurationInBlocks(overrides?: CallOverrides): Promise<BigNumber>;

  auctionEndBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  auctionEnded(overrides?: CallOverrides): Promise<boolean>;

  bidsByAddress(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBalance(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCurrentAuctionPrice(overrides?: CallOverrides): Promise<BigNumber>;

  hasReceivedValidBid(overrides?: CallOverrides): Promise<boolean>;

  initialBidValue(overrides?: CallOverrides): Promise<BigNumber>;

  initialParticipant(overrides?: CallOverrides): Promise<string>;

  minimumAcceptablePrice(overrides?: CallOverrides): Promise<BigNumber>;

  placeBid(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  priceDecrementPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  retrieveRefund(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startPrice(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    auctionCreator(overrides?: CallOverrides): Promise<string>;

    auctionDurationInBlocks(overrides?: CallOverrides): Promise<BigNumber>;

    auctionEndBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    auctionEnded(overrides?: CallOverrides): Promise<boolean>;

    bidsByAddress(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBalance(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentAuctionPrice(overrides?: CallOverrides): Promise<BigNumber>;

    hasReceivedValidBid(overrides?: CallOverrides): Promise<boolean>;

    initialBidValue(overrides?: CallOverrides): Promise<BigNumber>;

    initialParticipant(overrides?: CallOverrides): Promise<string>;

    minimumAcceptablePrice(overrides?: CallOverrides): Promise<BigNumber>;

    placeBid(overrides?: CallOverrides): Promise<boolean>;

    priceDecrementPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    retrieveRefund(overrides?: CallOverrides): Promise<void>;

    startPrice(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "AuctionCompleted(address,uint256)"(
      winner?: null,
      amount?: null
    ): AuctionCompletedEventFilter;
    AuctionCompleted(winner?: null, amount?: null): AuctionCompletedEventFilter;
  };

  estimateGas: {
    auctionCreator(overrides?: CallOverrides): Promise<BigNumber>;

    auctionDurationInBlocks(overrides?: CallOverrides): Promise<BigNumber>;

    auctionEndBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    auctionEnded(overrides?: CallOverrides): Promise<BigNumber>;

    bidsByAddress(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBalance(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentAuctionPrice(overrides?: CallOverrides): Promise<BigNumber>;

    hasReceivedValidBid(overrides?: CallOverrides): Promise<BigNumber>;

    initialBidValue(overrides?: CallOverrides): Promise<BigNumber>;

    initialParticipant(overrides?: CallOverrides): Promise<BigNumber>;

    minimumAcceptablePrice(overrides?: CallOverrides): Promise<BigNumber>;

    placeBid(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    priceDecrementPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    retrieveRefund(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startPrice(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    auctionCreator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    auctionDurationInBlocks(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    auctionEndBlockNumber(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    auctionEnded(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bidsByAddress(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBalance(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentAuctionPrice(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasReceivedValidBid(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialBidValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialParticipant(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minimumAcceptablePrice(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    placeBid(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    priceDecrementPerBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    retrieveRefund(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
