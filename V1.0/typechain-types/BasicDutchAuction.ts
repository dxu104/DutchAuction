/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface BasicDutchAuctionInterface extends utils.Interface {
  functions: {
    "auctionEndBlock()": FunctionFragment;
    "auctionStartingPrice()": FunctionFragment;
    "bidAmountsByAddress(address)": FunctionFragment;
    "claimRefund()": FunctionFragment;
    "getBidAmount(address)": FunctionFragment;
    "getCurrentPrice()": FunctionFragment;
    "initialBidAmount()": FunctionFragment;
    "initialBidder()": FunctionFragment;
    "isAuctionOver()": FunctionFragment;
    "numBlocksAuctionOpen()": FunctionFragment;
    "offerPriceDecrement()": FunctionFragment;
    "owner()": FunctionFragment;
    "placeBid()": FunctionFragment;
    "receivedValidBid()": FunctionFragment;
    "reservePrice()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "auctionEndBlock"
      | "auctionStartingPrice"
      | "bidAmountsByAddress"
      | "claimRefund"
      | "getBidAmount"
      | "getCurrentPrice"
      | "initialBidAmount"
      | "initialBidder"
      | "isAuctionOver"
      | "numBlocksAuctionOpen"
      | "offerPriceDecrement"
      | "owner"
      | "placeBid"
      | "receivedValidBid"
      | "reservePrice"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "auctionEndBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auctionStartingPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bidAmountsByAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRefund",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBidAmount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialBidAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialBidder",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAuctionOver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numBlocksAuctionOpen",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "offerPriceDecrement",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "placeBid", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "receivedValidBid",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reservePrice",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "auctionEndBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionStartingPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bidAmountsByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBidAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialBidAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialBidder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuctionOver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numBlocksAuctionOpen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "offerPriceDecrement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "placeBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "receivedValidBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reservePrice",
    data: BytesLike
  ): Result;

  events: {
    "AuctionEnded(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuctionEnded"): EventFragment;
}

export interface AuctionEndedEventObject {
  winner: string;
  amount: BigNumber;
}
export type AuctionEndedEvent = TypedEvent<
  [string, BigNumber],
  AuctionEndedEventObject
>;

export type AuctionEndedEventFilter = TypedEventFilter<AuctionEndedEvent>;

export interface BasicDutchAuction extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BasicDutchAuctionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    auctionEndBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    auctionStartingPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    bidAmountsByAddress(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimRefund(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBidAmount(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCurrentPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialBidAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialBidder(overrides?: CallOverrides): Promise<[string]>;

    isAuctionOver(overrides?: CallOverrides): Promise<[boolean]>;

    numBlocksAuctionOpen(overrides?: CallOverrides): Promise<[BigNumber]>;

    offerPriceDecrement(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    placeBid(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    receivedValidBid(overrides?: CallOverrides): Promise<[boolean]>;

    reservePrice(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  auctionEndBlock(overrides?: CallOverrides): Promise<BigNumber>;

  auctionStartingPrice(overrides?: CallOverrides): Promise<BigNumber>;

  bidAmountsByAddress(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimRefund(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBidAmount(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCurrentPrice(overrides?: CallOverrides): Promise<BigNumber>;

  initialBidAmount(overrides?: CallOverrides): Promise<BigNumber>;

  initialBidder(overrides?: CallOverrides): Promise<string>;

  isAuctionOver(overrides?: CallOverrides): Promise<boolean>;

  numBlocksAuctionOpen(overrides?: CallOverrides): Promise<BigNumber>;

  offerPriceDecrement(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  placeBid(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  receivedValidBid(overrides?: CallOverrides): Promise<boolean>;

  reservePrice(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    auctionEndBlock(overrides?: CallOverrides): Promise<BigNumber>;

    auctionStartingPrice(overrides?: CallOverrides): Promise<BigNumber>;

    bidAmountsByAddress(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimRefund(overrides?: CallOverrides): Promise<void>;

    getBidAmount(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentPrice(overrides?: CallOverrides): Promise<BigNumber>;

    initialBidAmount(overrides?: CallOverrides): Promise<BigNumber>;

    initialBidder(overrides?: CallOverrides): Promise<string>;

    isAuctionOver(overrides?: CallOverrides): Promise<boolean>;

    numBlocksAuctionOpen(overrides?: CallOverrides): Promise<BigNumber>;

    offerPriceDecrement(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    placeBid(overrides?: CallOverrides): Promise<boolean>;

    receivedValidBid(overrides?: CallOverrides): Promise<boolean>;

    reservePrice(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "AuctionEnded(address,uint256)"(
      winner?: null,
      amount?: null
    ): AuctionEndedEventFilter;
    AuctionEnded(winner?: null, amount?: null): AuctionEndedEventFilter;
  };

  estimateGas: {
    auctionEndBlock(overrides?: CallOverrides): Promise<BigNumber>;

    auctionStartingPrice(overrides?: CallOverrides): Promise<BigNumber>;

    bidAmountsByAddress(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimRefund(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBidAmount(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentPrice(overrides?: CallOverrides): Promise<BigNumber>;

    initialBidAmount(overrides?: CallOverrides): Promise<BigNumber>;

    initialBidder(overrides?: CallOverrides): Promise<BigNumber>;

    isAuctionOver(overrides?: CallOverrides): Promise<BigNumber>;

    numBlocksAuctionOpen(overrides?: CallOverrides): Promise<BigNumber>;

    offerPriceDecrement(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    placeBid(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    receivedValidBid(overrides?: CallOverrides): Promise<BigNumber>;

    reservePrice(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    auctionEndBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    auctionStartingPrice(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bidAmountsByAddress(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimRefund(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBidAmount(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialBidAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialBidder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isAuctionOver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numBlocksAuctionOpen(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    offerPriceDecrement(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    placeBid(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    receivedValidBid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reservePrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
