/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  AuctionContract,
  AuctionContractInterface,
} from "../../BasicDutchAuction.sol/AuctionContract";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_minimumAcceptablePrice",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_auctionDurationBlocks",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_decrementPerBlock",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "auctionCreationBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "auctionDurationBlocks",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "auctionOwner",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decrementPerBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBid",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "initialOfferPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "minimumAcceptablePrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "placeBid",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "successfulBidder",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6101206040523480156200001257600080fd5b5060405162000eee38038062000eee8339818101604052810190620000389190620001c4565b62000054670170f3b4ccca1ad060c01b6200018160201b60201c565b62000070676ce42295e3edf5aa60c01b6200018160201b60201c565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050620000c06717f8b1ac9faf56bb60c01b6200018160201b60201c565b8260a08181525050620000e467c09a9c1cc99fb06d60c01b6200018160201b60201c565b8160c081815250506200010867c68e598d43514dcd60c01b6200018160201b60201c565b8060e081815250506200012c674f0623f36854cade60c01b6200018160201b60201c565b43610100818152505062000151675a824642628bb25b60c01b6200018160201b60201c565b60e05160c0516200016391906200024f565b60a0516200017291906200029a565b600081905550505050620002d5565b50565b600080fd5b6000819050919050565b6200019e8162000189565b8114620001aa57600080fd5b50565b600081519050620001be8162000193565b92915050565b600080600060608486031215620001e057620001df62000184565b5b6000620001f086828701620001ad565b93505060206200020386828701620001ad565b92505060406200021686828701620001ad565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006200025c8262000189565b9150620002698362000189565b9250828202620002798162000189565b9150828204841483151762000293576200029262000220565b5b5092915050565b6000620002a78262000189565b9150620002b48362000189565b9250828201905080821115620002cf57620002ce62000220565b5b92915050565b60805160a05160c05160e05161010051610ba36200034b600039600081816102930152818161043901526105a201526000818161022f01526103b10152600081816102e90152818161045d015261060c01526000818161034c01526103f101526000818161041501526107c70152610ba36000f3fe6080604052600436106100865760003560e01c8063bf41ab3f11610059578063bf41ab3f14610137578063d3924aaf14610162578063da891a241461018d578063ec754de0146101b8578063ecfc7ecc146101e357610086565b8063027c47f81461008b57806314a553a6146100b6578063532d0456146100e15780637f1ecfe01461010c575b600080fd5b34801561009757600080fd5b506100a0610201565b6040516100ad91906108c2565b60405180910390f35b3480156100c257600080fd5b506100cb610227565b6040516100d891906108f6565b60405180910390f35b3480156100ed57600080fd5b506100f661022d565b60405161010391906108f6565b60405180910390f35b34801561011857600080fd5b50610121610251565b60405161012e91906108f6565b60405180910390f35b34801561014357600080fd5b5061014c6103ef565b60405161015991906108f6565b60405180910390f35b34801561016e57600080fd5b50610177610413565b6040516101849190610932565b60405180910390f35b34801561019957600080fd5b506101a2610437565b6040516101af91906108f6565b60405180910390f35b3480156101c457600080fd5b506101cd61045b565b6040516101da91906108f6565b60405180910390f35b6101eb61047f565b6040516101f891906108c2565b60405180910390f35b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60005481565b7f000000000000000000000000000000000000000000000000000000000000000081565b600061026767bf767e99efeee28860c01b61087e565b61027b67281ea4f1ff3c92c960c01b61087e565b61028f67a9dda868ee608ccf60c01b61087e565b60007f0000000000000000000000000000000000000000000000000000000000000000436102bd919061097c565b90506102d367f7553173df46e27160c01b61087e565b6102e767b0b1a3840003acc460c01b61087e565b7f000000000000000000000000000000000000000000000000000000000000000081106103735761032267a82317d2e4a7be5860c01b61087e565b610336673b998ada9892ac6460c01b61087e565b61034a67c1d4f35c5dcc1f1d60c01b61087e565b7f00000000000000000000000000000000000000000000000000000000000000009150506103ec565b6103876756d8c56a875100a460c01b61087e565b61039b67495188c1814d705d60c01b61087e565b6103af67ffefed850204bf7f60c01b61087e565b7f0000000000000000000000000000000000000000000000000000000000000000816103db91906109b0565b6000546103e8919061097c565b9150505b90565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000610495671ce8dff98d89868260c01b61087e565b6104a96731b8ef948dd2d00b60c01b61087e565b6104bd67ac43c67e49ffe79e60c01b61087e565b6104d167f874824f5c2c37e560c01b61087e565b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610562576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055990610a4f565b60405180910390fd5b61057667f59abfc02336d5bd60c01b61087e565b61058a67527d7c2d13aa244360c01b61087e565b61059e675de6852b9870d86a60c01b61087e565b60007f0000000000000000000000000000000000000000000000000000000000000000436105cc919061097c565b90506105e267840dc5c684cb583260c01b61087e565b6105f667ebe44e914a71af9060c01b61087e565b61060a670ffd37eec77e969560c01b61087e565b7f000000000000000000000000000000000000000000000000000000000000000081111561066d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066490610abb565b60405180910390fd5b610681674be7969e336b3e0b60c01b61087e565b610695672d93f3b6b154d1b460c01b61087e565b6106a9672e8fed654c1da9d060c01b61087e565b60006106b3610251565b90506106c96726417d13e6fe9f7060c01b61087e565b6106dd67abe653b9290c0df360c01b61087e565b6106f167c20ffab0ea9bcb8260c01b61087e565b80341015610734576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072b90610b4d565b60405180910390fd5b61074867b4827b18d806e17960c01b61087e565b61075c673a760b71e877576760c01b61087e565b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506107b1675e40a0e10be4741e60c01b61087e565b6107c567a5b12bce8e92deeb60c01b61087e565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f1935050505015801561082b573d6000803e3d6000fd5b50610840675f3103eb710c926860c01b61087e565b6108546731174a297bc8ddca60c01b61087e565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169250505090565b50565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108ac82610881565b9050919050565b6108bc816108a1565b82525050565b60006020820190506108d760008301846108b3565b92915050565b6000819050919050565b6108f0816108dd565b82525050565b600060208201905061090b60008301846108e7565b92915050565b600061091c82610881565b9050919050565b61092c81610911565b82525050565b60006020820190506109476000830184610923565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610987826108dd565b9150610992836108dd565b92508282039050818111156109aa576109a961094d565b5b92915050565b60006109bb826108dd565b91506109c6836108dd565b92508282026109d4816108dd565b915082820484148315176109eb576109ea61094d565b5b5092915050565b600082825260208201905092915050565b7f41756374696f6e20697320616c726561647920636f6d706c6574650000000000600082015250565b6000610a39601b836109f2565b9150610a4482610a03565b602082019050919050565b60006020820190508181036000830152610a6881610a2c565b9050919050565b7f41756374696f6e206973206f7665720000000000000000000000000000000000600082015250565b6000610aa5600f836109f2565b9150610ab082610a6f565b602082019050919050565b60006020820190508181036000830152610ad481610a98565b9050919050565b7f4269642076616c7565206973206c657373207468616e2074686520637572726560008201527f6e74207072696365000000000000000000000000000000000000000000000000602082015250565b6000610b376028836109f2565b9150610b4282610adb565b604082019050919050565b60006020820190508181036000830152610b6681610b2a565b905091905056fea26469706673582212202fd821e2678fa4a29147e925fac61dd673c07bcf1375ade8a4972a3ebcc0f95164736f6c63430008120033";

type AuctionContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AuctionContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AuctionContract__factory extends ContractFactory {
  constructor(...args: AuctionContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _minimumAcceptablePrice: PromiseOrValue<BigNumberish>,
    _auctionDurationBlocks: PromiseOrValue<BigNumberish>,
    _decrementPerBlock: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<AuctionContract> {
    return super.deploy(
      _minimumAcceptablePrice,
      _auctionDurationBlocks,
      _decrementPerBlock,
      overrides || {}
    ) as Promise<AuctionContract>;
  }
  override getDeployTransaction(
    _minimumAcceptablePrice: PromiseOrValue<BigNumberish>,
    _auctionDurationBlocks: PromiseOrValue<BigNumberish>,
    _decrementPerBlock: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _minimumAcceptablePrice,
      _auctionDurationBlocks,
      _decrementPerBlock,
      overrides || {}
    );
  }
  override attach(address: string): AuctionContract {
    return super.attach(address) as AuctionContract;
  }
  override connect(signer: Signer): AuctionContract__factory {
    return super.connect(signer) as AuctionContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AuctionContractInterface {
    return new utils.Interface(_abi) as AuctionContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AuctionContract {
    return new Contract(address, _abi, signerOrProvider) as AuctionContract;
  }
}
